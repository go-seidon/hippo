// Code generated by MockGen. DO NOT EDIT.
// Source: internal/healthcheck/go_health.go

// Package mock_healthcheck is a generated GoMock package.
package mock_healthcheck

import (
	reflect "reflect"

	health "github.com/InVisionApp/go-health"
	gomock "github.com/golang/mock/gomock"
)

// MockHealthClient is a mock of HealthClient interface.
type MockHealthClient struct {
	ctrl     *gomock.Controller
	recorder *MockHealthClientMockRecorder
}

// MockHealthClientMockRecorder is the mock recorder for MockHealthClient.
type MockHealthClientMockRecorder struct {
	mock *MockHealthClient
}

// NewMockHealthClient creates a new mock instance.
func NewMockHealthClient(ctrl *gomock.Controller) *MockHealthClient {
	mock := &MockHealthClient{ctrl: ctrl}
	mock.recorder = &MockHealthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthClient) EXPECT() *MockHealthClientMockRecorder {
	return m.recorder
}

// AddChecks mocks base method.
func (m *MockHealthClient) AddChecks(cfgs []*health.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddChecks", cfgs)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddChecks indicates an expected call of AddChecks.
func (mr *MockHealthClientMockRecorder) AddChecks(cfgs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChecks", reflect.TypeOf((*MockHealthClient)(nil).AddChecks), cfgs)
}

// Start mocks base method.
func (m *MockHealthClient) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockHealthClientMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockHealthClient)(nil).Start))
}

// State mocks base method.
func (m *MockHealthClient) State() (map[string]health.State, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State")
	ret0, _ := ret[0].(map[string]health.State)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// State indicates an expected call of State.
func (mr *MockHealthClientMockRecorder) State() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockHealthClient)(nil).State))
}

// Stop mocks base method.
func (m *MockHealthClient) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockHealthClientMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockHealthClient)(nil).Stop))
}
