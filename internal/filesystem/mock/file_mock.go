// Code generated by MockGen. DO NOT EDIT.
// Source: internal/filesystem/file.go

// Package mock_filesystem is a generated GoMock package.
package mock_filesystem

import (
	context "context"
	reflect "reflect"

	filesystem "github.com/go-seidon/hippo/internal/filesystem"
	gomock "github.com/golang/mock/gomock"
)

// MockFileManager is a mock of FileManager interface.
type MockFileManager struct {
	ctrl     *gomock.Controller
	recorder *MockFileManagerMockRecorder
}

// MockFileManagerMockRecorder is the mock recorder for MockFileManager.
type MockFileManagerMockRecorder struct {
	mock *MockFileManager
}

// NewMockFileManager creates a new mock instance.
func NewMockFileManager(ctrl *gomock.Controller) *MockFileManager {
	mock := &MockFileManager{ctrl: ctrl}
	mock.recorder = &MockFileManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileManager) EXPECT() *MockFileManagerMockRecorder {
	return m.recorder
}

// IsFileExists mocks base method.
func (m *MockFileManager) IsFileExists(ctx context.Context, p filesystem.IsFileExistsParam) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFileExists", ctx, p)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFileExists indicates an expected call of IsFileExists.
func (mr *MockFileManagerMockRecorder) IsFileExists(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFileExists", reflect.TypeOf((*MockFileManager)(nil).IsFileExists), ctx, p)
}

// OpenFile mocks base method.
func (m *MockFileManager) OpenFile(ctx context.Context, p filesystem.OpenFileParam) (*filesystem.OpenFileResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenFile", ctx, p)
	ret0, _ := ret[0].(*filesystem.OpenFileResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenFile indicates an expected call of OpenFile.
func (mr *MockFileManagerMockRecorder) OpenFile(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFile", reflect.TypeOf((*MockFileManager)(nil).OpenFile), ctx, p)
}

// RemoveFile mocks base method.
func (m *MockFileManager) RemoveFile(ctx context.Context, p filesystem.RemoveFileParam) (*filesystem.RemoveFileResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFile", ctx, p)
	ret0, _ := ret[0].(*filesystem.RemoveFileResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFile indicates an expected call of RemoveFile.
func (mr *MockFileManagerMockRecorder) RemoveFile(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFile", reflect.TypeOf((*MockFileManager)(nil).RemoveFile), ctx, p)
}

// SaveFile mocks base method.
func (m *MockFileManager) SaveFile(ctx context.Context, p filesystem.SaveFileParam) (*filesystem.SaveFileResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFile", ctx, p)
	ret0, _ := ret[0].(*filesystem.SaveFileResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveFile indicates an expected call of SaveFile.
func (mr *MockFileManagerMockRecorder) SaveFile(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFile", reflect.TypeOf((*MockFileManager)(nil).SaveFile), ctx, p)
}
