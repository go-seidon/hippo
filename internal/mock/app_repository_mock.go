// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	app "github.com/go-seidon/local/internal/app"
	gomock "github.com/golang/mock/gomock"
)

// MockRepositoryOption is a mock of RepositoryOption interface.
type MockRepositoryOption struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryOptionMockRecorder
}

// MockRepositoryOptionMockRecorder is the mock recorder for MockRepositoryOption.
type MockRepositoryOptionMockRecorder struct {
	mock *MockRepositoryOption
}

// NewMockRepositoryOption creates a new mock instance.
func NewMockRepositoryOption(ctrl *gomock.Controller) *MockRepositoryOption {
	mock := &MockRepositoryOption{ctrl: ctrl}
	mock.recorder = &MockRepositoryOptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryOption) EXPECT() *MockRepositoryOptionMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockRepositoryOption) Apply(arg0 *app.NewRepositoryOption) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Apply", arg0)
}

// Apply indicates an expected call of Apply.
func (mr *MockRepositoryOptionMockRecorder) Apply(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockRepositoryOption)(nil).Apply), arg0)
}
