// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/file.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	service "github.com/go-seidon/hippo/internal/service"
	system "github.com/go-seidon/provider/system"
	gomock "github.com/golang/mock/gomock"
)

// MockFile is a mock of File interface.
type MockFile struct {
	ctrl     *gomock.Controller
	recorder *MockFileMockRecorder
}

// MockFileMockRecorder is the mock recorder for MockFile.
type MockFileMockRecorder struct {
	mock *MockFile
}

// NewMockFile creates a new mock instance.
func NewMockFile(ctrl *gomock.Controller) *MockFile {
	mock := &MockFile{ctrl: ctrl}
	mock.recorder = &MockFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFile) EXPECT() *MockFileMockRecorder {
	return m.recorder
}

// DeleteFile mocks base method.
func (m *MockFile) DeleteFile(ctx context.Context, p service.DeleteFileParam) (*service.DeleteFileResult, *system.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", ctx, p)
	ret0, _ := ret[0].(*service.DeleteFileResult)
	ret1, _ := ret[1].(*system.Error)
	return ret0, ret1
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockFileMockRecorder) DeleteFile(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockFile)(nil).DeleteFile), ctx, p)
}

// RetrieveFile mocks base method.
func (m *MockFile) RetrieveFile(ctx context.Context, p service.RetrieveFileParam) (*service.RetrieveFileResult, *system.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveFile", ctx, p)
	ret0, _ := ret[0].(*service.RetrieveFileResult)
	ret1, _ := ret[1].(*system.Error)
	return ret0, ret1
}

// RetrieveFile indicates an expected call of RetrieveFile.
func (mr *MockFileMockRecorder) RetrieveFile(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveFile", reflect.TypeOf((*MockFile)(nil).RetrieveFile), ctx, p)
}

// UploadFile mocks base method.
func (m *MockFile) UploadFile(ctx context.Context, opts ...service.UploadFileOption) (*service.UploadFileResult, *system.Error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadFile", varargs...)
	ret0, _ := ret[0].(*service.UploadFileResult)
	ret1, _ := ret[1].(*system.Error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockFileMockRecorder) UploadFile(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockFile)(nil).UploadFile), varargs...)
}
