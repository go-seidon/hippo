// Code generated by MockGen. DO NOT EDIT.
// Source: generated/proto/api/grpc/v1/file_grpc.pb.go

// Package mock_grpcv1 is a generated GoMock package.
package mock_grpcv1

import (
	context "context"
	reflect "reflect"

	grpc_v1 "github.com/go-seidon/local/generated/proto/api/grpc/v1"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockFileServiceClient is a mock of FileServiceClient interface.
type MockFileServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockFileServiceClientMockRecorder
}

// MockFileServiceClientMockRecorder is the mock recorder for MockFileServiceClient.
type MockFileServiceClientMockRecorder struct {
	mock *MockFileServiceClient
}

// NewMockFileServiceClient creates a new mock instance.
func NewMockFileServiceClient(ctrl *gomock.Controller) *MockFileServiceClient {
	mock := &MockFileServiceClient{ctrl: ctrl}
	mock.recorder = &MockFileServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileServiceClient) EXPECT() *MockFileServiceClientMockRecorder {
	return m.recorder
}

// DeleteFile mocks base method.
func (m *MockFileServiceClient) DeleteFile(ctx context.Context, in *grpc_v1.DeleteFileParam, opts ...grpc.CallOption) (*grpc_v1.DeleteFileResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFile", varargs...)
	ret0, _ := ret[0].(*grpc_v1.DeleteFileResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockFileServiceClientMockRecorder) DeleteFile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockFileServiceClient)(nil).DeleteFile), varargs...)
}

// RetrieveFile mocks base method.
func (m *MockFileServiceClient) RetrieveFile(ctx context.Context, in *grpc_v1.RetrieveFileParam, opts ...grpc.CallOption) (grpc_v1.FileService_RetrieveFileClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveFile", varargs...)
	ret0, _ := ret[0].(grpc_v1.FileService_RetrieveFileClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveFile indicates an expected call of RetrieveFile.
func (mr *MockFileServiceClientMockRecorder) RetrieveFile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveFile", reflect.TypeOf((*MockFileServiceClient)(nil).RetrieveFile), varargs...)
}

// MockFileService_RetrieveFileClient is a mock of FileService_RetrieveFileClient interface.
type MockFileService_RetrieveFileClient struct {
	ctrl     *gomock.Controller
	recorder *MockFileService_RetrieveFileClientMockRecorder
}

// MockFileService_RetrieveFileClientMockRecorder is the mock recorder for MockFileService_RetrieveFileClient.
type MockFileService_RetrieveFileClientMockRecorder struct {
	mock *MockFileService_RetrieveFileClient
}

// NewMockFileService_RetrieveFileClient creates a new mock instance.
func NewMockFileService_RetrieveFileClient(ctrl *gomock.Controller) *MockFileService_RetrieveFileClient {
	mock := &MockFileService_RetrieveFileClient{ctrl: ctrl}
	mock.recorder = &MockFileService_RetrieveFileClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileService_RetrieveFileClient) EXPECT() *MockFileService_RetrieveFileClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockFileService_RetrieveFileClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockFileService_RetrieveFileClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockFileService_RetrieveFileClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockFileService_RetrieveFileClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockFileService_RetrieveFileClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFileService_RetrieveFileClient)(nil).Context))
}

// Header mocks base method.
func (m *MockFileService_RetrieveFileClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockFileService_RetrieveFileClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockFileService_RetrieveFileClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockFileService_RetrieveFileClient) Recv() (*grpc_v1.RetrieveFileResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*grpc_v1.RetrieveFileResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockFileService_RetrieveFileClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockFileService_RetrieveFileClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockFileService_RetrieveFileClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockFileService_RetrieveFileClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFileService_RetrieveFileClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockFileService_RetrieveFileClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockFileService_RetrieveFileClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFileService_RetrieveFileClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockFileService_RetrieveFileClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockFileService_RetrieveFileClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockFileService_RetrieveFileClient)(nil).Trailer))
}

// MockFileServiceServer is a mock of FileServiceServer interface.
type MockFileServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockFileServiceServerMockRecorder
}

// MockFileServiceServerMockRecorder is the mock recorder for MockFileServiceServer.
type MockFileServiceServerMockRecorder struct {
	mock *MockFileServiceServer
}

// NewMockFileServiceServer creates a new mock instance.
func NewMockFileServiceServer(ctrl *gomock.Controller) *MockFileServiceServer {
	mock := &MockFileServiceServer{ctrl: ctrl}
	mock.recorder = &MockFileServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileServiceServer) EXPECT() *MockFileServiceServerMockRecorder {
	return m.recorder
}

// DeleteFile mocks base method.
func (m *MockFileServiceServer) DeleteFile(arg0 context.Context, arg1 *grpc_v1.DeleteFileParam) (*grpc_v1.DeleteFileResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", arg0, arg1)
	ret0, _ := ret[0].(*grpc_v1.DeleteFileResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockFileServiceServerMockRecorder) DeleteFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockFileServiceServer)(nil).DeleteFile), arg0, arg1)
}

// RetrieveFile mocks base method.
func (m *MockFileServiceServer) RetrieveFile(arg0 *grpc_v1.RetrieveFileParam, arg1 grpc_v1.FileService_RetrieveFileServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RetrieveFile indicates an expected call of RetrieveFile.
func (mr *MockFileServiceServerMockRecorder) RetrieveFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveFile", reflect.TypeOf((*MockFileServiceServer)(nil).RetrieveFile), arg0, arg1)
}

// MockUnsafeFileServiceServer is a mock of UnsafeFileServiceServer interface.
type MockUnsafeFileServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeFileServiceServerMockRecorder
}

// MockUnsafeFileServiceServerMockRecorder is the mock recorder for MockUnsafeFileServiceServer.
type MockUnsafeFileServiceServerMockRecorder struct {
	mock *MockUnsafeFileServiceServer
}

// NewMockUnsafeFileServiceServer creates a new mock instance.
func NewMockUnsafeFileServiceServer(ctrl *gomock.Controller) *MockUnsafeFileServiceServer {
	mock := &MockUnsafeFileServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeFileServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeFileServiceServer) EXPECT() *MockUnsafeFileServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedFileServiceServer mocks base method.
func (m *MockUnsafeFileServiceServer) mustEmbedUnimplementedFileServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFileServiceServer")
}

// mustEmbedUnimplementedFileServiceServer indicates an expected call of mustEmbedUnimplementedFileServiceServer.
func (mr *MockUnsafeFileServiceServerMockRecorder) mustEmbedUnimplementedFileServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFileServiceServer", reflect.TypeOf((*MockUnsafeFileServiceServer)(nil).mustEmbedUnimplementedFileServiceServer))
}

// MockFileService_RetrieveFileServer is a mock of FileService_RetrieveFileServer interface.
type MockFileService_RetrieveFileServer struct {
	ctrl     *gomock.Controller
	recorder *MockFileService_RetrieveFileServerMockRecorder
}

// MockFileService_RetrieveFileServerMockRecorder is the mock recorder for MockFileService_RetrieveFileServer.
type MockFileService_RetrieveFileServerMockRecorder struct {
	mock *MockFileService_RetrieveFileServer
}

// NewMockFileService_RetrieveFileServer creates a new mock instance.
func NewMockFileService_RetrieveFileServer(ctrl *gomock.Controller) *MockFileService_RetrieveFileServer {
	mock := &MockFileService_RetrieveFileServer{ctrl: ctrl}
	mock.recorder = &MockFileService_RetrieveFileServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileService_RetrieveFileServer) EXPECT() *MockFileService_RetrieveFileServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockFileService_RetrieveFileServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockFileService_RetrieveFileServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFileService_RetrieveFileServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockFileService_RetrieveFileServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockFileService_RetrieveFileServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFileService_RetrieveFileServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockFileService_RetrieveFileServer) Send(arg0 *grpc_v1.RetrieveFileResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockFileService_RetrieveFileServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockFileService_RetrieveFileServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockFileService_RetrieveFileServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockFileService_RetrieveFileServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockFileService_RetrieveFileServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockFileService_RetrieveFileServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockFileService_RetrieveFileServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFileService_RetrieveFileServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockFileService_RetrieveFileServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockFileService_RetrieveFileServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockFileService_RetrieveFileServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockFileService_RetrieveFileServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockFileService_RetrieveFileServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockFileService_RetrieveFileServer)(nil).SetTrailer), arg0)
}
